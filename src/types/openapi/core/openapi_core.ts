/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/ocs/v2.php/core/getapppassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Create app password
         * @description This endpoint requires password confirmation
         */
        get: operations["app_password-get-app-password"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/core/apppassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete app password */
        delete: operations["app_password-delete-app-password"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/core/apppassword/rotate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Rotate app password */
        post: operations["app_password-rotate-app-password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/core/apppassword/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Confirm the user password */
        put: operations["app_password-confirm-user-password"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/core/autocomplete/get": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Autocomplete a query */
        get: operations["auto_complete-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/collaboration/resources/collections/{collectionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a collection */
        get: operations["collaboration_resources-list-collection"];
        /** Rename a collection */
        put: operations["collaboration_resources-rename-collection"];
        /** Add a resource to a collection */
        post: operations["collaboration_resources-add-resource"];
        /** Remove a resource from a collection */
        delete: operations["collaboration_resources-remove-resource"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/collaboration/resources/collections/search/{filter}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Search for collections */
        get: operations["collaboration_resources-search-collections"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/collaboration/resources/{resourceType}/{resourceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get collections by resource */
        get: operations["collaboration_resources-get-collections-by-resource"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/collaboration/resources/{baseResourceType}/{baseResourceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a collection for a resource */
        post: operations["collaboration_resources-create-collection-on-resource"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/hovercard/v1/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the account details for a hovercard */
        get: operations["hover_card-get-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/core/navigation/apps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the apps navigation */
        get: operations["navigation-get-apps-navigation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/core/navigation/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the settings navigation */
        get: operations["navigation-get-settings-navigation"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/capabilities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the capabilities */
        get: operations["ocs-get-capabilities"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/profile/{targetUserId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get profile fields for another user */
        get: operations["profile_api-get-profile-fields"];
        /**
         * Update the visibility of a parameter
         * @description This endpoint requires password confirmation
         */
        put: operations["profile_api-set-visibility"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/references/extract": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Extract references from a text */
        post: operations["reference_api-extract"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/references/extractPublic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Extract references from a text */
        post: operations["reference_api-extract-public"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/references/resolve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Resolve a reference */
        get: operations["reference_api-resolve-one"];
        put?: never;
        /** Resolve multiple references */
        post: operations["reference_api-resolve"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/references/resolvePublic": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Resolve from a public page */
        get: operations["reference_api-resolve-one-public"];
        put?: never;
        /** Resolve multiple references from a public page */
        post: operations["reference_api-resolve-public"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/references/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the providers */
        get: operations["reference_api-get-providers-info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/references/provider/{providerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Touch a provider */
        put: operations["reference_api-touch-provider"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/taskprocessing/tasktypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns all available TaskProcessing task types */
        get: operations["task_processing_api-task-types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/taskprocessing/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Schedules a task */
        post: operations["task_processing_api-schedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/taskprocessing/task/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Gets a task including status and result
         * @description Tasks are removed 1 week after receiving their last update
         */
        get: operations["task_processing_api-get-task"];
        put?: never;
        post?: never;
        /** Deletes a task */
        delete: operations["task_processing_api-delete-task"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/taskprocessing/tasks/app/{appId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns tasks for the current user filtered by the appId and optional customId */
        get: operations["task_processing_api-list-tasks-by-app"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/taskprocessing/tasks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns tasks for the current user filtered by the optional taskType and optional customId */
        get: operations["task_processing_api-list-tasks"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/taskprocessing/tasks/{taskId}/file/{fileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns the contents of a file referenced in a task */
        get: operations["task_processing_api-get-file-contents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/taskprocessing/tasks/{taskId}/cancel": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Cancels a task */
        post: operations["task_processing_api-cancel-task"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/teams/{teamId}/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all resources of a team */
        get: operations["teams_api-resolve-one"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/teams/resources/{providerId}/{resourceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all teams of a resource */
        get: operations["teams_api-list-teams"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/textprocessing/tasktypes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** This endpoint returns all available LanguageModel task types */
        get: operations["text_processing_api-task-types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/textprocessing/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** This endpoint allows scheduling a language model task */
        post: operations["text_processing_api-schedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/textprocessing/task/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** This endpoint allows checking the status and results of a task. Tasks are removed 1 week after receiving their last update. */
        get: operations["text_processing_api-get-task"];
        put?: never;
        post?: never;
        /** This endpoint allows to delete a scheduled task for a user */
        delete: operations["text_processing_api-delete-task"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/textprocessing/tasks/app/{appId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** This endpoint returns a list of tasks of a user that are related with a specific appId and optionally with an identifier */
        get: operations["text_processing_api-list-tasks-by-app"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/text2image/is_available": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check whether this feature is available */
        get: operations["text_to_image_api-is-available"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/text2image/schedule": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** This endpoint allows scheduling a text to image task */
        post: operations["text_to_image_api-schedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/text2image/task/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** This endpoint allows checking the status and results of a task. Tasks are removed 1 week after receiving their last update. */
        get: operations["text_to_image_api-get-task"];
        put?: never;
        post?: never;
        /** This endpoint allows to delete a scheduled task for a user */
        delete: operations["text_to_image_api-delete-task"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/text2image/task/{id}/image/{index}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** This endpoint allows downloading the resulting image of a task */
        get: operations["text_to_image_api-get-image"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/text2image/tasks/app/{appId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** This endpoint returns a list of tasks of a user that are related with a specific appId and optionally with an identifier */
        get: operations["text_to_image_api-list-tasks-by-app"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/translation/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of supported languages */
        get: operations["translation_api-languages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/translation/translate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Translate a text */
        post: operations["translation_api-translate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/search/providers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the providers for unified search */
        get: operations["unified_search-get-providers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/search/providers/{providerId}/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Launch a search for a specific search provider.
         * @description Additional filters are available for each provider. Send a request to /providers endpoint to list providers with their available filters.
         */
        get: operations["unified_search-search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/core/whatsnew": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the changes */
        get: operations["whats_new-get"];
        put?: never;
        /** Dismiss the changes */
        post: operations["whats_new-dismiss"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/avatar/{userId}/{size}/dark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the dark avatar */
        get: operations["avatar-get-avatar-dark"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/avatar/{userId}/{size}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the avatar */
        get: operations["avatar-get-avatar"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/csrftoken": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns a new CSRF token. */
        get: operations["csrf_token-index"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/login/v2/poll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Poll the login flow credentials */
        post: operations["client_flow_login_v2-poll"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/login/v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Init a login flow */
        post: operations["client_flow_login_v2-init"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/avatar/guest/{guestName}/{size}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns a guest avatar image response */
        get: operations["guest_avatar-get-avatar"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/avatar/guest/{guestName}/{size}/dark": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Returns a dark guest avatar image response */
        get: operations["guest_avatar-get-avatar-dark"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/login/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Confirm the user password */
        post: operations["login-confirm-password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/ocm-provider": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** generate a OCMProvider with local data and send it as DataResponse. This replaces the old PHP file ocm-provider/index.php */
        get: operations["ocm-discovery"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/core/preview.png": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a preview by file path */
        get: operations["preview-get-preview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/core/preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a preview by file ID */
        get: operations["preview-get-preview-by-file-id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/core/mimeicon": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a preview by mime */
        get: operations["preview-get-mime-icon-url"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/core/references/preview/{referenceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a preview for a reference */
        get: operations["reference-preview"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/core/wipe/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Check if the device should be wiped */
        post: operations["wipe-check-wipe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/index.php/core/wipe/success": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Finish the wipe */
        post: operations["wipe-wipe-done"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/status.php": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["get-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        AutocompleteResult: {
            id: string;
            label: string;
            icon: string;
            source: string;
            status: {
                status: string;
                message: string | null;
                icon: string | null;
                /** Format: int64 */
                clearAt: number | null;
            } | string;
            subline: string;
            shareWithDisplayNameUnique: string;
        };
        Capabilities: {
            core: {
                /** Format: int64 */
                pollinterval: number;
                "webdav-root": string;
                "reference-api": boolean;
                "reference-regex": string;
                "mod-rewrite-working": boolean;
                user?: {
                    language: string;
                    locale: string;
                    timezone: string;
                };
            };
        };
        Collection: {
            /** Format: int64 */
            id: number;
            name: string;
            resources: components["schemas"]["Resource"][];
        };
        ContactsAction: {
            title: string;
            icon: string;
            hyperlink: string;
            appId: string;
        };
        LoginFlowV2: {
            poll: {
                token: string;
                endpoint: string;
            };
            login: string;
        };
        LoginFlowV2Credentials: {
            server: string;
            loginName: string;
            appPassword: string;
        };
        NavigationEntry: {
            id: string;
            /** Format: int64 */
            order?: number;
            href: string;
            icon: string;
            type: string;
            name: string;
            app?: string;
            default?: boolean;
            active: boolean;
            classes: string;
            /** Format: int64 */
            unread: number;
        };
        OCSMeta: {
            status: string;
            statuscode: number;
            message?: string;
            totalitems?: string;
            itemsperpage?: string;
        };
        OpenGraphObject: {
            id: string;
            name: string;
            description: string | null;
            thumb: string | null;
            link: string;
        };
        ProfileAction: {
            id: string;
            icon: string;
            title: string;
            target: string | null;
        };
        ProfileData: components["schemas"]["ProfileFields"] & {
            /** @description Timezone identifier like Europe/Berlin or America/North_Dakota/Beulah */
            timezone: string;
            /**
             * Format: int64
             * @description Offset in seconds, negative when behind UTC, positive otherwise
             */
            timezoneOffset: number;
        };
        ProfileFields: {
            userId: string;
            address?: string | null;
            biography?: string | null;
            displayname?: string | null;
            headline?: string | null;
            isUserAvatarVisible?: boolean;
            organisation?: string | null;
            pronouns?: string | null;
            role?: string | null;
            actions: components["schemas"]["ProfileAction"][];
        };
        PublicCapabilities: {
            bruteforce: {
                /** Format: int64 */
                delay: number;
                "allow-listed": boolean;
            };
        };
        Reference: {
            richObjectType: string;
            richObject: {
                [key: string]: Record<string, never> | null;
            };
            openGraphObject: components["schemas"]["OpenGraphObject"];
            accessible: boolean;
        };
        ReferenceProvider: {
            id: string;
            title: string;
            icon_url: string;
            /** Format: int64 */
            order: number;
            search_providers_ids: string[] | null;
        };
        Resource: {
            richObjectType: string;
            richObject: {
                [key: string]: Record<string, never> | null;
            };
            openGraphObject: components["schemas"]["OpenGraphObject"];
            accessible: boolean;
        };
        Status: {
            installed: boolean;
            maintenance: boolean;
            needsDbUpgrade: boolean;
            version: string;
            versionstring: string;
            edition: string;
            productname: string;
            extendedSupport: boolean;
        };
        TaskProcessingIO: {
            [key: string]: number | number[] | string | string[];
        };
        TaskProcessingShape: {
            name: string;
            description: string;
            /** @enum {string} */
            type: "Number" | "Text" | "Audio" | "Image" | "Video" | "File" | "Enum" | "ListOfNumbers" | "ListOfTexts" | "ListOfImages" | "ListOfAudios" | "ListOfVideos" | "ListOfFiles";
        };
        TaskProcessingTask: {
            /** Format: int64 */
            id: number;
            /** Format: int64 */
            lastUpdated: number;
            type: string;
            /** @enum {string} */
            status: "STATUS_CANCELLED" | "STATUS_FAILED" | "STATUS_SUCCESSFUL" | "STATUS_RUNNING" | "STATUS_SCHEDULED" | "STATUS_UNKNOWN";
            userId: string | null;
            appId: string;
            input: components["schemas"]["TaskProcessingIO"];
            output: components["schemas"]["TaskProcessingIO"] | null;
            customId: string | null;
            /** Format: int64 */
            completionExpectedAt: number | null;
            /** Format: double */
            progress: number | null;
            /** Format: int64 */
            scheduledAt: number | null;
            /** Format: int64 */
            startedAt: number | null;
            /** Format: int64 */
            endedAt: number | null;
            allowCleanup: boolean;
        };
        TaskProcessingTaskType: {
            name: string;
            description: string;
            inputShape: {
                [key: string]: components["schemas"]["TaskProcessingShape"];
            };
            inputShapeEnumValues: {
                [key: string]: {
                    name: string;
                    value: string;
                }[];
            };
            inputShapeDefaults: {
                [key: string]: number | string;
            };
            optionalInputShape: {
                [key: string]: components["schemas"]["TaskProcessingShape"];
            };
            optionalInputShapeEnumValues: {
                [key: string]: {
                    name: string;
                    value: string;
                }[];
            };
            optionalInputShapeDefaults: {
                [key: string]: number | string;
            };
            outputShape: {
                [key: string]: components["schemas"]["TaskProcessingShape"];
            };
            outputShapeEnumValues: {
                [key: string]: {
                    name: string;
                    value: string;
                }[];
            };
            optionalOutputShape: {
                [key: string]: components["schemas"]["TaskProcessingShape"];
            };
            optionalOutputShapeEnumValues: {
                [key: string]: {
                    name: string;
                    value: string;
                }[];
            };
        };
        Team: {
            teamId: string;
            displayName: string;
            link: string | null;
        };
        TeamResource: {
            id: string;
            label: string;
            url: string;
            iconSvg: string | null;
            iconURL: string | null;
            iconEmoji: string | null;
            provider: {
                id: string;
                name: string;
                icon: string;
            };
        };
        TeamWithResources: components["schemas"]["Team"] & {
            resources: components["schemas"]["TeamResource"][];
        };
        TextProcessingTask: {
            /** Format: int64 */
            id: number | null;
            type: string;
            /**
             * Format: int64
             * @enum {integer}
             */
            status: 0 | 1 | 2 | 3 | 4;
            userId: string | null;
            appId: string;
            input: string;
            output: string | null;
            identifier: string;
            /** Format: int64 */
            completionExpectedAt: number | null;
        };
        TextToImageTask: {
            /** Format: int64 */
            id: number | null;
            /**
             * Format: int64
             * @enum {integer}
             */
            status: 0 | 1 | 2 | 3 | 4;
            userId: string | null;
            appId: string;
            input: string;
            identifier: string | null;
            /** Format: int64 */
            numberOfImages: number;
            /** Format: int64 */
            completionExpectedAt: number | null;
        };
        UnifiedSearchProvider: {
            id: string;
            appId: string;
            name: string;
            icon: string;
            /** Format: int64 */
            order: number;
            isExternalProvider: boolean;
            triggers: string[];
            filters: {
                [key: string]: string;
            };
            inAppSearch: boolean;
        };
        UnifiedSearchResult: {
            name: string;
            isPaginated: boolean;
            entries: components["schemas"]["UnifiedSearchResultEntry"][];
            cursor: (number | string) | null;
        };
        UnifiedSearchResultEntry: {
            thumbnailUrl: string;
            title: string;
            subline: string;
            resourceUrl: string;
            icon: string;
            rounded: boolean;
            attributes: string[];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    "app_password-get-app-password": {
        parameters: {
            query?: never;
            header: {
                "user-agent"?: string;
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description App password returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                apppassword: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Creating app password is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "app_password-delete-app-password": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description App password deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Deleting app password is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "app_password-rotate-app-password": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description App password returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                apppassword: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Rotating app password is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "app_password-confirm-user-password": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The password of the user */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Password confirmation succeeded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                /** Format: int64 */
                                lastLogin: number;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Password confirmation failed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "auto_complete-get": {
        parameters: {
            query: {
                /** @description Text to search for */
                search: string;
                /** @description Type of the items to search for */
                itemType?: string | null;
                /** @description ID of the items to search for */
                itemId?: string | null;
                /** @description can be piped, top prio first, e.g.: "commenters|share-recipients" */
                sorter?: string | null;
                /** @description Types of shares to search for */
                "shareTypes[]"?: number[];
                /** @description Maximum number of results to return */
                limit?: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Autocomplete results returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["AutocompleteResult"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "collaboration_resources-list-collection": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the collection */
                collectionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Collection returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Collection"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "collaboration_resources-rename-collection": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the collection */
                collectionId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description New name */
                    collectionName: string;
                };
            };
        };
        responses: {
            /** @description Collection returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Collection"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "collaboration_resources-add-resource": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the collection */
                collectionId: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the resource */
                    resourceType: string;
                    /** @description ID of the resource */
                    resourceId: string;
                };
            };
        };
        responses: {
            /** @description Collection returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Collection"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Collection not found or resource inaccessible */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "collaboration_resources-remove-resource": {
        parameters: {
            query: {
                /** @description Name of the resource */
                resourceType: string;
                /** @description ID of the resource */
                resourceId: string;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the collection */
                collectionId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Collection returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Collection"];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Collection or resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "collaboration_resources-search-collections": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description Filter collections */
                filter: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Collections returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Collection"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Collection not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "collaboration_resources-get-collections-by-resource": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description Type of the resource */
                resourceType: string;
                /** @description ID of the resource */
                resourceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Collections returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Collection"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Resource not accessible */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "collaboration_resources-create-collection-on-resource": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description Type of the base resource */
                baseResourceType: string;
                /** @description ID of the base resource */
                baseResourceId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Name of the collection */
                    name: string;
                };
            };
        };
        responses: {
            /** @description Collection returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["Collection"];
                        };
                    };
                };
            };
            /** @description Creating collection is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Resource inaccessible */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "hover_card-get-user": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Account details returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                userId: string;
                                displayName: string;
                                actions: components["schemas"]["ContactsAction"][];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "navigation-get-apps-navigation": {
        parameters: {
            query?: {
                /** @description Rewrite URLs to absolute ones */
                absolute?: boolean;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Apps navigation returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["NavigationEntry"][];
                        };
                    };
                };
            };
            /** @description No apps navigation changed */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "navigation-get-settings-navigation": {
        parameters: {
            query?: {
                /** @description Rewrite URLs to absolute ones */
                absolute?: boolean;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Apps navigation returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["NavigationEntry"][];
                        };
                    };
                };
            };
            /** @description No apps navigation changed */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "ocs-get-capabilities": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Capabilities returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                version: {
                                    /** Format: int64 */
                                    major: number;
                                    /** Format: int64 */
                                    minor: number;
                                    /** Format: int64 */
                                    micro: number;
                                    string: string;
                                    edition: string;
                                    extendedSupport: boolean;
                                };
                                capabilities: {
                                    [key: string]: Record<string, never>;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    "profile_api-get-profile-fields": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                targetUserId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile data returned successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ProfileData"];
                        };
                    };
                };
            };
            /** @description Profile is disabled */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Account not found or disabled */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "profile_api-set-visibility": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                targetUserId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description ID of the parameter */
                    paramId: string;
                    /** @description New visibility */
                    visibility: string;
                };
            };
        };
        responses: {
            /** @description Visibility updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Updating visibility is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Not allowed to edit other users visibility */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Account not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "reference_api-extract": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Text to extract from */
                    text: string;
                    /**
                     * @description Resolve the references
                     * @default false
                     */
                    resolve?: boolean;
                    /**
                     * Format: int64
                     * @description Maximum amount of references to extract
                     * @default 1
                     */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description References returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                references: {
                                    [key: string]: components["schemas"]["Reference"] | null;
                                };
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "reference_api-extract-public": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Text to extract from */
                    text: string;
                    /** @description Token of the public share */
                    sharingToken: string;
                    /**
                     * @description Resolve the references
                     * @default false
                     */
                    resolve?: boolean;
                    /**
                     * Format: int64
                     * @description Maximum amount of references to extract, limited to 15
                     * @default 1
                     */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description References returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                references: {
                                    [key: string]: components["schemas"]["Reference"] | null;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    "reference_api-resolve-one": {
        parameters: {
            query: {
                /** @description Reference to resolve */
                reference: string;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reference returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                references: {
                                    [key: string]: components["schemas"]["Reference"] | null;
                                };
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "reference_api-resolve": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description References to resolve */
                    references: string[];
                    /**
                     * Format: int64
                     * @description Maximum amount of references to resolve
                     * @default 1
                     */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description References returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                references: {
                                    [key: string]: components["schemas"]["Reference"] | null;
                                };
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "reference_api-resolve-one-public": {
        parameters: {
            query: {
                /** @description Reference to resolve */
                reference: string;
                /** @description Token of the public share */
                sharingToken: string;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reference returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                references: {
                                    [key: string]: components["schemas"]["Reference"] | null;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    "reference_api-resolve-public": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description References to resolve */
                    references: string[];
                    /** @description Token of the public share */
                    sharingToken: string;
                    /**
                     * Format: int64
                     * @description Maximum amount of references to resolve, limited to 15
                     * @default 1
                     */
                    limit?: number;
                };
            };
        };
        responses: {
            /** @description References returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                references: {
                                    [key: string]: components["schemas"]["Reference"] | null;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    "reference_api-get-providers-info": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Providers returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["ReferenceProvider"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "reference_api-touch-provider": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the provider */
                providerId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description Timestamp of the last usage
                     * @default null
                     */
                    timestamp?: number | null;
                };
            };
        };
        responses: {
            /** @description Provider touched */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                success: boolean;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "task_processing_api-task-types": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task types returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                types: {
                                    [key: string]: components["schemas"]["TaskProcessingTaskType"];
                                };
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "task_processing_api-schedule": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Task's input parameters */
                    input: {
                        [key: string]: Record<string, never>;
                    };
                    /** @description Type of the task */
                    type: string;
                    /** @description ID of the app that will execute the task */
                    appId: string;
                    /**
                     * @description An arbitrary identifier for the task
                     * @default
                     */
                    customId?: string;
                    /**
                     * @description URI to be requested when the task finishes
                     * @default null
                     */
                    webhookUri?: string | null;
                    /**
                     * @description Method used for the webhook request (HTTP:GET, HTTP:POST, HTTP:PUT, HTTP:DELETE or AppAPI:APP_ID:GET, AppAPI:APP_ID:POST...)
                     * @default null
                     */
                    webhookMethod?: string | null;
                };
            };
        };
        responses: {
            /** @description Task scheduled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                task: components["schemas"]["TaskProcessingTask"];
                            };
                        };
                    };
                };
            };
            /** @description Scheduling task is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Cannot schedule task because it references files in its input that the user doesn't have access to */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    } | {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Scheduling task is not possible */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "task_processing_api-get-task": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description The id of the task */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                task: components["schemas"]["TaskProcessingTask"];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "task_processing_api-delete-task": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description The id of the task */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task deleted */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "task_processing_api-list-tasks-by-app": {
        parameters: {
            query?: {
                /** @description An arbitrary identifier for the task */
                customId?: string | null;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the app */
                appId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tasks returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                tasks: components["schemas"]["TaskProcessingTask"][];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "task_processing_api-list-tasks": {
        parameters: {
            query?: {
                /** @description The task type to filter by */
                taskType?: string | null;
                /** @description An arbitrary identifier for the task */
                customId?: string | null;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tasks returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                tasks: components["schemas"]["TaskProcessingTask"][];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "task_processing_api-get-file-contents": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description The id of the task */
                taskId: number;
                /** @description The file id of the file to retrieve */
                fileId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description File content returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Task or file not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "task_processing_api-cancel-task": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description The id of the task */
                taskId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task canceled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                task: components["schemas"]["TaskProcessingTask"];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "teams_api-resolve-one": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description Unique id of the team */
                teamId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resources returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                resources: components["schemas"]["TeamResource"][];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "teams_api-list-teams": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description Identifier of the provider (e.g. deck, talk, collectives) */
                providerId: string;
                /** @description Unique id of the resource to list teams for (e.g. deck board id) */
                resourceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Teams returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                teams: components["schemas"]["TeamWithResources"][];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "text_processing_api-task-types": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task types returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                types: {
                                    id: string;
                                    name: string;
                                    description: string;
                                }[];
                            };
                        };
                    };
                };
            };
        };
    };
    "text_processing_api-schedule": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Input text */
                    input: string;
                    /** @description Type of the task */
                    type: string;
                    /** @description ID of the app that will execute the task */
                    appId: string;
                    /**
                     * @description An arbitrary identifier for the task
                     * @default
                     */
                    identifier?: string;
                };
            };
        };
        responses: {
            /** @description Task scheduled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                task: components["schemas"]["TextProcessingTask"];
                            };
                        };
                    };
                };
            };
            /** @description Scheduling task is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Scheduling task is not possible */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "text_processing_api-get-task": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description The id of the task */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                task: components["schemas"]["TextProcessingTask"];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "text_processing_api-delete-task": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description The id of the task */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                task: components["schemas"]["TextProcessingTask"];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "text_processing_api-list-tasks-by-app": {
        parameters: {
            query?: {
                /** @description An arbitrary identifier for the task */
                identifier?: string | null;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the app */
                appId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task list returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                tasks: components["schemas"]["TextProcessingTask"][];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "text_to_image_api-is-available": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Returns availability status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                isAvailable: boolean;
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "text_to_image_api-schedule": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Input text */
                    input: string;
                    /** @description ID of the app that will execute the task */
                    appId: string;
                    /**
                     * @description An arbitrary identifier for the task
                     * @default
                     */
                    identifier?: string;
                    /**
                     * Format: int64
                     * @description The number of images to generate
                     * @default 8
                     */
                    numberOfImages?: number;
                };
            };
        };
        responses: {
            /** @description Task scheduled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                task: components["schemas"]["TextToImageTask"];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Scheduling task is not possible */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "text_to_image_api-get-task": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description The id of the task */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                task: components["schemas"]["TextToImageTask"];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "text_to_image_api-delete-task": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description The id of the task */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                task: components["schemas"]["TextToImageTask"];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Task not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "text_to_image_api-get-image": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description The id of the task */
                id: number;
                /** @description The index of the image to retrieve */
                index: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Image returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Task or image not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "text_to_image_api-list-tasks-by-app": {
        parameters: {
            query?: {
                /** @description An arbitrary identifier for the task */
                identifier?: string | null;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the app */
                appId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Task list returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                tasks: components["schemas"]["TextToImageTask"][];
                            };
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                            };
                        };
                    };
                };
            };
        };
    };
    "translation_api-languages": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Supported languages returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                languages: {
                                    from: string;
                                    fromLabel: string;
                                    to: string;
                                    toLabel: string;
                                }[];
                                languageDetection: boolean;
                            };
                        };
                    };
                };
            };
        };
    };
    "translation_api-translate": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Text to be translated */
                    text: string;
                    /** @description Language to translate from */
                    fromLanguage?: string | null;
                    /** @description Language to translate to */
                    toLanguage: string;
                };
            };
        };
        responses: {
            /** @description Translated text returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                text: string;
                                from: string | null;
                            };
                        };
                    };
                };
            };
            /** @description Language not detected or unable to translate */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                                from?: string | null;
                            };
                        };
                    };
                };
            };
            /** @description Translating is not possible */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                                from?: string | null;
                            };
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                message: string;
                                from?: string | null;
                            };
                        };
                    };
                };
            };
        };
    };
    "unified_search-get-providers": {
        parameters: {
            query?: {
                /** @description the url the user is currently at */
                from?: string;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Providers returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["UnifiedSearchProvider"][];
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "unified_search-search": {
        parameters: {
            query?: {
                /** @description Term to search */
                term?: string;
                /** @description Order of entries */
                sortOrder?: number | null;
                /** @description Maximum amount of entries (capped by configurable unified-search.max-results-per-request, default: 25) */
                limit?: number | null;
                /** @description Offset for searching */
                cursor?: (number | string) | null;
                /** @description The current user URL */
                from?: string;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the provider */
                providerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search entries returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["UnifiedSearchResult"];
                        };
                    };
                };
            };
            /** @description Searching is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: string;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "whats_new-get": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Changes returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                changelogURL: string;
                                product: string;
                                version: string;
                                whatsNew?: {
                                    regular: string[];
                                    admin: string[];
                                };
                            };
                        };
                    };
                };
            };
            /** @description No changes */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "whats_new-dismiss": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Version to dismiss the changes for */
                    version: string;
                };
            };
        };
        responses: {
            /** @description Changes dismissed */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "text/plain": string;
                };
            };
        };
    };
    "avatar-get-avatar-dark": {
        parameters: {
            query?: {
                /** @description Fallback to guest avatar if not found */
                guestFallback?: boolean;
            };
            header?: never;
            path: {
                /** @description ID of the user */
                userId: string;
                /** @description Size of the avatar */
                size: 64 | 512;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Avatar returned */
            200: {
                headers: {
                    "X-NC-IsCustomAvatar"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Avatar returned */
            201: {
                headers: {
                    "X-NC-IsCustomAvatar"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Avatar not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "avatar-get-avatar": {
        parameters: {
            query?: {
                /** @description Fallback to guest avatar if not found */
                guestFallback?: boolean;
            };
            header?: never;
            path: {
                /** @description ID of the user */
                userId: string;
                /** @description Size of the avatar */
                size: 64 | 512;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Avatar returned */
            200: {
                headers: {
                    "X-NC-IsCustomAvatar"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Avatar returned */
            201: {
                headers: {
                    "X-NC-IsCustomAvatar"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Avatar not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "csrf_token-index": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description CSRF token returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        token: string;
                    };
                };
            };
            /** @description Strict cookie check failed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "client_flow_login_v2-poll": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Token of the flow */
                    token: string;
                };
            };
        };
        responses: {
            /** @description Login flow credentials returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginFlowV2Credentials"];
                };
            };
            /** @description Login flow not found or completed */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "client_flow_login_v2-init": {
        parameters: {
            query?: never;
            header?: {
                "user-agent"?: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Login flow init returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginFlowV2"];
                };
            };
        };
    };
    "guest_avatar-get-avatar": {
        parameters: {
            query?: {
                /** @description Return dark avatar */
                darkTheme?: boolean | null;
            };
            header?: never;
            path: {
                /** @description The guest name, e.g. "Albert" */
                guestName: string;
                /** @description The desired avatar size, e.g. 64 for 64x64px */
                size: 64 | 512;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Custom avatar returned */
            200: {
                headers: {
                    "X-NC-IsCustomAvatar"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Avatar returned */
            201: {
                headers: {
                    "X-NC-IsCustomAvatar"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "guest_avatar-get-avatar-dark": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The guest name, e.g. "Albert" */
                guestName: string;
                /** @description The desired avatar size, e.g. 64 for 64x64px */
                size: 64 | 512;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Custom avatar returned */
            200: {
                headers: {
                    "X-NC-IsCustomAvatar"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Avatar returned */
            201: {
                headers: {
                    "X-NC-IsCustomAvatar"?: number;
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "login-confirm-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description The password of the user */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Password confirmation succeeded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Format: int64 */
                        lastLogin: number;
                    };
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            /** @description Password confirmation failed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "ocm-discovery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OCM Provider details returned */
            200: {
                headers: {
                    "X-NEXTCLOUD-OCM-PROVIDERS"?: true;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        enabled: boolean;
                        apiVersion: string;
                        endPoint: string;
                        resourceTypes: {
                            name: string;
                            shareTypes: string[];
                            protocols: {
                                webdav: string;
                            };
                        }[];
                    };
                };
            };
            /** @description OCM not supported */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
        };
    };
    "preview-get-preview": {
        parameters: {
            query?: {
                /** @description Path of the file */
                file?: string;
                /** @description Width of the preview. A width of -1 will use the original image width. */
                x?: number;
                /** @description Height of the preview. A height of -1 will use the original image height. */
                y?: number;
                /** @description Preserve the aspect ratio */
                a?: boolean;
                /** @description Force returning an icon */
                forceIcon?: boolean;
                /** @description How to crop the image */
                mode?: "fill" | "cover";
                /** @description Whether to fallback to the mime icon if no preview is available */
                mimeFallback?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Preview returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Redirect to the mime icon url if mimeFallback is true */
            303: {
                headers: {
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Getting preview is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            /** @description Getting preview is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Preview not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "preview-get-preview-by-file-id": {
        parameters: {
            query?: {
                /** @description ID of the file */
                fileId?: number;
                /** @description Width of the preview. A width of -1 will use the original image width. */
                x?: number;
                /** @description Height of the preview. A height of -1 will use the original image height. */
                y?: number;
                /** @description Preserve the aspect ratio */
                a?: boolean;
                /** @description Force returning an icon */
                forceIcon?: boolean;
                /** @description How to crop the image */
                mode?: "fill" | "cover";
                /** @description Whether to fallback to the mime icon if no preview is available */
                mimeFallback?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Preview returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Redirect to the mime icon url if mimeFallback is true */
            303: {
                headers: {
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Getting preview is not possible */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Current user is not logged in */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message: string;
                    };
                };
            };
            /** @description Getting preview is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Preview not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "preview-get-mime-icon-url": {
        parameters: {
            query?: {
                /** @description Mime type */
                mime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The mime icon url */
            303: {
                headers: {
                    Location?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "reference-preview": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description the reference cache key */
                referenceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Preview returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "*/*": string;
                };
            };
            /** @description Reference not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    "wipe-check-wipe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description App password */
                    token: string;
                };
            };
        };
        responses: {
            /** @description Device should be wiped */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        wipe: boolean;
                    };
                };
            };
            /** @description Device should not be wiped */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "wipe-wipe-done": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description App password */
                    token: string;
                };
            };
        };
        responses: {
            /** @description Wipe finished successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Device should not be wiped */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    "get-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Status returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Status"];
                };
            };
        };
    };
}
