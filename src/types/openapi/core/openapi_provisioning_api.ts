/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
    "/ocs/v2.php/cloud/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of groups */
        get: operations["groups-get-groups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/groups/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of groups details */
        get: operations["groups-get-groups-details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/groups/{groupId}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of users in the specified group */
        get: operations["groups-get-group-users"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/groups/{groupId}/users/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of users details in the specified group */
        get: operations["groups-get-group-users-details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/groups/{groupId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a list of users in the specified group
         * @deprecated
         */
        get: operations["groups-get-group"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of users */
        get: operations["users-get-users"];
        put?: never;
        /**
         * Create a new user
         * @description This endpoint requires password confirmation
         */
        post: operations["users-add-user"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of users and their details */
        get: operations["users-get-users-details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/disabled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of disabled users and their details */
        get: operations["users-get-disabled-users-details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/search/by-phone": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Search users by their phone numbers */
        post: operations["users-search-by-phone-numbers"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the details of a user */
        get: operations["users-get-user"];
        /**
         * Update a value of the user's details
         * @description This endpoint requires password confirmation
         */
        put: operations["users-edit-user"];
        post?: never;
        /**
         * Delete a user
         * @description This endpoint requires password confirmation
         */
        delete: operations["users-delete-user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the details of the current user */
        get: operations["users-get-current-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/user/fields": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of fields that are editable for the current user */
        get: operations["users-get-editable-fields"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/user/fields/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of fields that are editable for a user */
        get: operations["users-get-editable-fields-for-user"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/user/apps": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of enabled apps for the current user */
        get: operations["users-get-enabled-apps"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/{userId}/{collectionName}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update multiple values of the user's details
         * @description This endpoint requires password confirmation
         */
        put: operations["users-edit-user-multi-value"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/{userId}/wipe": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Wipe all devices of a user
         * @description This endpoint requires password confirmation
         */
        post: operations["users-wipe-user-devices"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/{userId}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable a user
         * @description This endpoint requires password confirmation
         */
        put: operations["users-enable-user"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/{userId}/disable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Disable a user
         * @description This endpoint requires password confirmation
         */
        put: operations["users-disable-user"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/{userId}/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of groups the user belongs to */
        get: operations["users-get-users-groups"];
        put?: never;
        /**
         * Add a user to a group
         * @description This endpoint requires password confirmation
         */
        post: operations["users-add-to-group"];
        /**
         * Remove a user from a group
         * @description This endpoint requires password confirmation
         */
        delete: operations["users-remove-from-group"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/{userId}/groups/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of groups with details */
        get: operations["users-get-users-groups-details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/{userId}/subadmins/details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a list of the groups the user is a subadmin of, with details */
        get: operations["users-get-user-sub-admin-groups-details"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/cloud/users/{userId}/welcome": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend the welcome message
         * @description This endpoint requires password confirmation
         */
        post: operations["users-resend-welcome-message"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/provisioning_api/api/v1/config/apps/{app}/{key}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update the config value of an app
         * @description This endpoint requires password confirmation
         */
        post: operations["app_config-set-value"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}/{configKey}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update a preference value of an app */
        post: operations["preferences-set-preference"];
        /** Delete a preference for an app */
        delete: operations["preferences-delete-preference"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ocs/v2.php/apps/provisioning_api/api/v1/config/users/{appId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Update multiple preference values of an app */
        post: operations["preferences-set-multiple-preferences"];
        /** Delete multiple preferences for an app */
        delete: operations["preferences-delete-multiple-preference"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
};
export type webhooks = Record<string, never>;
export type components = {
    schemas: {
        Capabilities: {
            provisioning_api: {
                version: string;
                /** Format: int64 */
                AccountPropertyScopesVersion: number;
                AccountPropertyScopesFederatedEnabled: boolean;
                AccountPropertyScopesPublishedEnabled: boolean;
            };
        };
        GroupDetails: {
            id: string;
            displayname: string;
            usercount: boolean | number;
            disabled: boolean | number;
            canAdd: boolean;
            canRemove: boolean;
        };
        OCSMeta: {
            status: string;
            statuscode: number;
            message?: string;
            totalitems?: string;
            itemsperpage?: string;
        };
        UserDetails: {
            additional_mail: string[];
            additional_mailScope?: components["schemas"]["UserDetailsScope"][];
            address: string;
            addressScope?: components["schemas"]["UserDetailsScope"];
            avatarScope?: components["schemas"]["UserDetailsScope"];
            backend: string;
            backendCapabilities: {
                setDisplayName: boolean;
                setPassword: boolean;
            };
            biography: string;
            biographyScope?: components["schemas"]["UserDetailsScope"];
            "display-name": string;
            displayname: string;
            displaynameScope?: components["schemas"]["UserDetailsScope"];
            email: string | null;
            emailScope?: components["schemas"]["UserDetailsScope"];
            enabled?: boolean;
            fediverse: string;
            fediverseScope?: components["schemas"]["UserDetailsScope"];
            groups: string[];
            headline: string;
            headlineScope?: components["schemas"]["UserDetailsScope"];
            id: string;
            language: string;
            /** Format: int64 */
            firstLoginTimestamp: number;
            /** Format: int64 */
            lastLoginTimestamp: number;
            /** Format: int64 */
            lastLogin: number;
            locale: string;
            manager: string;
            notify_email: string | null;
            organisation: string;
            organisationScope?: components["schemas"]["UserDetailsScope"];
            phone: string;
            phoneScope?: components["schemas"]["UserDetailsScope"];
            profile_enabled: string;
            profile_enabledScope?: components["schemas"]["UserDetailsScope"];
            pronouns: string;
            pronounsScope?: components["schemas"]["UserDetailsScope"];
            quota: components["schemas"]["UserDetailsQuota"];
            role: string;
            roleScope?: components["schemas"]["UserDetailsScope"];
            storageLocation?: string;
            subadmin: string[];
            timezone: string;
            twitter: string;
            twitterScope?: components["schemas"]["UserDetailsScope"];
            bluesky: string;
            blueskyScope?: components["schemas"]["UserDetailsScope"];
            website: string;
            websiteScope?: components["schemas"]["UserDetailsScope"];
        };
        UserDetailsQuota: {
            free?: number;
            quota?: number | string;
            relative?: number;
            total?: number;
            used?: number;
        };
        /** @enum {string} */
        UserDetailsScope: "v2-private" | "v2-local" | "v2-federated" | "v2-published" | "private" | "contacts" | "public";
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
};
export type $defs = Record<string, never>;
export interface operations {
    "groups-get-groups": {
        parameters: {
            query?: {
                /** @description Text to search for */
                search?: string;
                /** @description Limit the amount of groups returned */
                limit?: number | null;
                /** @description Offset for searching for groups */
                offset?: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Groups returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                groups: string[];
                            };
                        };
                    };
                };
            };
        };
    };
    "groups-get-groups-details": {
        parameters: {
            query?: {
                /** @description Text to search for */
                search?: string;
                /** @description Limit the amount of groups returned */
                limit?: number | null;
                /** @description Offset for searching for groups */
                offset?: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Groups details returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                groups: components["schemas"]["GroupDetails"][];
                            };
                        };
                    };
                };
            };
        };
    };
    "groups-get-group-users": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the group */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User IDs returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                users: string[];
                            };
                        };
                    };
                };
            };
            /** @description Missing permissions to get users in the group */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Group not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "groups-get-group-users-details": {
        parameters: {
            query?: {
                /** @description Text to search for */
                search?: string;
                /** @description Limit the amount of groups returned */
                limit?: number | null;
                /** @description Offset for searching for groups */
                offset?: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the group */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Group users details returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                users: {
                                    [key: string]: components["schemas"]["UserDetails"] | {
                                        id: string;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    "groups-get-group": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the group */
                groupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Group users returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                users: string[];
                            };
                        };
                    };
                };
            };
        };
    };
    "users-get-users": {
        parameters: {
            query?: {
                /** @description Text to search for */
                search?: string;
                /** @description Limit the amount of groups returned */
                limit?: number | null;
                /** @description Offset for searching for groups */
                offset?: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                users: string[];
                            };
                        };
                    };
                };
            };
        };
    };
    "users-add-user": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description ID of the user */
                    userid: string;
                    /**
                     * @description Password of the user
                     * @default
                     */
                    password?: string;
                    /**
                     * @description Display name of the user
                     * @default
                     */
                    displayName?: string;
                    /**
                     * @description Email of the user
                     * @default
                     */
                    email?: string;
                    /**
                     * @description Groups of the user
                     * @default []
                     */
                    groups?: string[];
                    /**
                     * @description Groups where the user is subadmin
                     * @default []
                     */
                    subadmin?: string[];
                    /**
                     * @description Quota of the user
                     * @default
                     */
                    quota?: string;
                    /**
                     * @description Language of the user
                     * @default
                     */
                    language?: string;
                    /**
                     * @description Manager of the user
                     * @default null
                     */
                    manager?: string | null;
                };
            };
        };
        responses: {
            /** @description User added successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                id: string;
                            };
                        };
                    };
                };
            };
            /** @description Missing permissions to make user subadmin */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "users-get-users-details": {
        parameters: {
            query?: {
                /** @description Text to search for */
                search?: string;
                /** @description Limit the amount of groups returned */
                limit?: number | null;
                /** @description Offset for searching for groups */
                offset?: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users details returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                users: {
                                    [key: string]: components["schemas"]["UserDetails"] | {
                                        id: string;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    "users-get-disabled-users-details": {
        parameters: {
            query?: {
                /** @description Text to search for */
                search?: string;
                /** @description Limit the amount of users returned */
                limit?: number | null;
                /** @description Offset */
                offset?: number;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Disabled users details returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                users: {
                                    [key: string]: components["schemas"]["UserDetails"] | {
                                        id: string;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    "users-search-by-phone-numbers": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Location of the phone number (for country code) */
                    location: string;
                    /** @description Phone numbers to search for */
                    search: {
                        [key: string]: string[];
                    };
                };
            };
        };
        responses: {
            /** @description Users returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                [key: string]: string;
                            };
                        };
                    };
                };
            };
            /** @description Invalid location */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "users-get-user": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["UserDetails"];
                        };
                    };
                };
            };
        };
    };
    "users-edit-user": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Key that will be updated */
                    key: string;
                    /** @description New value for the key */
                    value: string;
                };
            };
        };
        responses: {
            /** @description User value edited successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "users-delete-user": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "users-get-current-user": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current user returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: components["schemas"]["UserDetails"];
                        };
                    };
                };
            };
        };
    };
    "users-get-editable-fields": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Editable fields returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: string[];
                        };
                    };
                };
            };
        };
    };
    "users-get-editable-fields-for-user": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Editable fields for user returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: string[];
                        };
                    };
                };
            };
        };
    };
    "users-get-enabled-apps": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Enabled apps returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                apps: string[];
                            };
                        };
                    };
                };
            };
        };
    };
    "users-edit-user-multi-value": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
                /** @description Collection to update */
                collectionName: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Key that will be updated */
                    key: string;
                    /** @description New value for the key */
                    value: string;
                };
            };
        };
        responses: {
            /** @description User values edited successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "users-wipe-user-devices": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Wiped all user devices successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "users-enable-user": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User enabled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "users-disable-user": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User disabled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "users-get-users-groups": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users groups returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                groups: string[];
                            };
                        };
                    };
                };
            };
        };
    };
    "users-add-to-group": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description ID of the group
                     * @default
                     */
                    groupid?: string;
                };
            };
        };
        responses: {
            /** @description User added to group successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "users-remove-from-group": {
        parameters: {
            query: {
                /** @description ID of the group */
                groupid: string;
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User removed from group successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "users-get-users-groups-details": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users groups returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                groups: components["schemas"]["GroupDetails"][];
                            };
                        };
                    };
                };
            };
        };
    };
    "users-get-user-sub-admin-groups-details": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Users subadmin groups returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                groups: components["schemas"]["GroupDetails"][];
                            };
                        };
                    };
                };
            };
        };
    };
    "users-resend-welcome-message": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID if the user */
                userId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Resent welcome message successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "app_config-set-value": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the app */
                app: string;
                /** @description Key to update */
                key: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description New value for the key */
                    value: string;
                };
            };
        };
        responses: {
            /** @description Value updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description App or key is not allowed */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: {
                                data: {
                                    message: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    "preferences-set-preference": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the app */
                appId: string;
                /** @description Key of the preference */
                configKey: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description New value */
                    configValue: string;
                };
            };
        };
        responses: {
            /** @description Preference updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Preference invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "preferences-delete-preference": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the app */
                appId: string;
                /** @description Key to delete */
                configKey: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Preference deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Preference invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "preferences-set-multiple-preferences": {
        parameters: {
            query?: never;
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the app */
                appId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": {
                    /** @description Key-value pairs of the preferences */
                    configs: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Preferences updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Preference invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
    "preferences-delete-multiple-preference": {
        parameters: {
            query: {
                /** @description Keys to delete */
                "configKeys[]": string[];
            };
            header: {
                /** @description Required to be true for the API request to pass */
                "OCS-APIRequest": boolean;
            };
            path: {
                /** @description ID of the app */
                appId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Preferences deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
            /** @description Preference invalid */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ocs: {
                            meta: components["schemas"]["OCSMeta"];
                            data: unknown;
                        };
                    };
                };
            };
        };
    };
}
